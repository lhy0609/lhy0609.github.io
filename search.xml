<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>test title</title>
      <link href="/2019/02/20/test-title/"/>
      <url>/2019/02/20/test-title/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++命名规范</title>
      <link href="/2018/10/29/C-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2018/10/29/C-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h1 id="1-通用命名规则"><a href="#1-通用命名规则" class="headerlink" title="1.通用命名规则"></a>1.通用命名规则</h1><p>函数命名、变量命名、文件命名具有描述性</p><p>Windows : 大驼峰命名  //GetWidth()<br>Qt: 小驼峰命名    //getWidth()</p><p>int num_errors;<br>int num_completed_connections;</p><a id="more"></a><h1 id="2-文件命名"><a href="#2-文件命名" class="headerlink" title="2.文件命名"></a>2.文件命名</h1><p>文件名全部小写，可以包含下划线_或-</p><p>my_useful_class.cpp<br>my-useful-class.cpp </p><h1 id="3-变量命名"><a href="#3-变量命名" class="headerlink" title="3.变量命名"></a>3.变量命名</h1><ul><li>匈牙利命名法<br>g<em>      global                     全局<br>m</em>      Data member of a class     类的数据成员<br>C       Class                      类 //CDocument</li></ul><p>a       Array                      数组<br>b       BOOL                       布尔<br>by      Unsigned Char(Byte)        无符号字符（字节）<br>c       Char                       字节<br>dw      DWORD                      无符号长整数<br>f       Flags                      标志<br>h       Handle                     句柄<br>i       Integar                    整数<br>n       Short int                  短整数<br>l       long                       长整数<br>p       Pointer                    指针<br>lp      Long pointer               长指针<br>s       String                     字符串<br>u       Unsigned int               无符号整数<br>w       WORD(Unsigned short)       无符号短整数<br>v       void                       空</p><ul><li>VC常用前缀<br>ch      char/TCHAR                 chGrade<br>b       BOOL                       bEnabled<br>n       int/UINT                   nLenth<br>w       WORD(16位无符号整型)        wPos</li></ul><p>可以用匈牙利命名法结合小驼峰</p><h1 id="4-函数命名"><a href="#4-函数命名" class="headerlink" title="4.函数命名"></a>4.函数命名</h1><p>首字母全部大写</p><p>AddTableEntry()<br>DeleteUrl()</p><p>Qt的槽函数以on开头（eg：onGetWidth()）<br>Qt的信号函数以sig开头（eg：sigClicked()）</p><h1 id="5-结构"><a href="#5-结构" class="headerlink" title="5.结构"></a>5.结构</h1><p>if,for,swith等关键字独占一行，后跟半个‘{’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if(m_nWidth == 19)&#123;</div><div class="line">    m_nWidth = 12;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="6-其他"><a href="#6-其他" class="headerlink" title="6.其他"></a>6.其他</h1><p>注释 在代码的上边，右边，结束位置<br>函数的注释写在头文件</p>]]></content>
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动硬盘上安装Ubuntu系统</title>
      <link href="/2018/08/03/%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E4%B8%8A%E5%AE%89%E8%A3%85Ubuntu%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/08/03/%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E4%B8%8A%E5%AE%89%E8%A3%85Ubuntu%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>这次瞎折腾的缘由一是一直想体验一下linux系统，到底好不好用，毕竟试过才知道。借用TESTV的宣传语，“帮你try，before you buy” ,那我就是“I want try, before you use”；二是办公的地方有一台旧电脑，想把它利用起来，然后把系统装在移动硬盘上，做到随插随用，岂不美哉😏。</p><p>中间爬了不少坑，现把它记录下来。</p><p>Let`s do it!</p><p>主参考教程：<a href="https://mzz.pub/2017/12/22/justplay/mobileubuntu/" target="_blank" rel="external">把Ubuntu16.04装进移动硬盘的惨痛实战</a></p><a id="more"></a><p>先放一张装好的图片<br><img src="" alt=""></p><p>这是装好Ubuntu之后，安装了Mac主题</p><h1 id="准备的工具"><a href="#准备的工具" class="headerlink" title="准备的工具"></a>准备的工具</h1><p>Ubuntu镜像文件: 官网下载<br>启动盘制作工具： <a href="https://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/" target="_blank" rel="external">Universal-USB-Installer</a></p><p>磁盘管理（分区）： DiskGenius</p><p>移动硬盘；U盘（8G以上）；</p><h1 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h1><p>运行Universal-USB-Installer,参考 <em>参考教程</em></p><h1 id="正式安装之前先说明一些问题"><a href="#正式安装之前先说明一些问题" class="headerlink" title="正式安装之前先说明一些问题"></a>正式安装之前先说明一些问题</h1><h2 id="1-移动硬盘是否需要先格式化"><a href="#1-移动硬盘是否需要先格式化" class="headerlink" title="1.移动硬盘是否需要先格式化"></a>1.移动硬盘是否需要先格式化</h2><p>我的结论不需要（<em>虽然我当初怕弄丢我硬盘的数据，还是把他格式化了；真香警告😂！</em>），我建议如果可以的话，还是最好备份一下，毕竟数据无价😊。<br>如果选择不格式化，则分出足够装ubuntu大小的一个分区，将其删除设为空闲，你没听错，设成空实现，因为这样也可以在装的过程中进行分区（但可能会遇到传说的4K对齐的问题）。</p><p>我当初的步骤是:</p><ul><li>格式化整个硬盘</li><li>使用DiskGenius软件进行分区</li></ul><table><thead><tr><th>名称</th><th style="text-align:center">格式</th><th style="text-align:center">大小</th></tr></thead><tbody><tr><td>/ (主分区)</td><td style="text-align:center">ext4</td><td style="text-align:center">20G</td></tr><tr><td>swag（交换分区）</td><td style="text-align:center">swap</td><td style="text-align:center">2G</td></tr><tr><td>/home</td><td style="text-align:center">ext4</td><td style="text-align:center">100G</td></tr></tbody></table><p>其余全分成ntfs用作日常使用，最终移动硬盘插在windows系统上的时候，装ubuntu系统那部分是隐藏的。</p><h2 id="2引导方式问题"><a href="#2引导方式问题" class="headerlink" title="2引导方式问题"></a>2引导方式问题</h2><p>我的电脑是UEFI引导＋GPT分区格式，如果你的电脑购买时预装win8.1以上系统，恭喜你就是这种模式。老电脑一般是legacy+MBR模式，可百度了解一下。</p><p>我最终安装成功是ubuntu采用legacy引导，win10采用UEFI引导</p><p>所以进ubuntu需要开机时按F12进行引导选择，win10不用</p><p>我是DELL电脑，BIOS中需要将 <code>security boot</code> 设为 <code>disable</code><br><code>legacy</code> 设为 <code>enable</code>；</p><h1 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h1><p>U盘启动进入Ubuntu live界面</p><p>此后参考主教程： 安装ubuntu</p><p>到分区那一步刹车，找到你的移动硬盘<br>因为咱之前已分好区，这时候将 <code>/</code> <code>swag</code> <code>/home</code> 三个分区分别点击更改<br>选择好标识与格式，格式化可选，点击确定</p><p>使其变成真正可识别的分区</p><p>Device for boot loader installation 选择你的主分区</p><p>之后接着看完<code>安装ubuntu</code>这一节</p><p>装完就可</p><p>大功告成👍！ 接下来就是Mac主题安装</p>]]></content>
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装OpenCV扩展库contrib</title>
      <link href="/2018/06/21/%E5%AE%89%E8%A3%85opencv%E6%89%A9%E5%B1%95%E5%BA%93contrib/"/>
      <url>/2018/06/21/%E5%AE%89%E8%A3%85opencv%E6%89%A9%E5%B1%95%E5%BA%93contrib/</url>
      <content type="html"><![CDATA[<p>做东西需要用到SURF，opencv3将此算法移到了第三方库contrib，<br>本文简述安装opencv的contrib库<br>环境：Qt5.9.1 + opencv3.1</p><a id="more"></a><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>contrib库 <a href="https://github.com/opencv/opencv_contrib/releases" target="_blank" rel="external">点此下载</a><br><em>推荐opencv是3.1，contrib就下载3.1，版本对应不容易出错</em><br>opencv3.1我之前已经安装过了<br>cmake 自行百度下载（可参考我之前QT与opencv配置的文章）</p><h1 id="编译contrib"><a href="#编译contrib" class="headerlink" title="编译contrib"></a>编译contrib</h1><p>将下载好的contrib解压到opencv文件夹<br>opencv3.1我之前已经编译过了<br>打开cmake-gui，找到OPENCV_EXTRA_MODULES_PATH<br>在后面选择<code>D:/opencv/opencv_contrib-3.1.0/modules</code>.<br>这是我的路径，根据你opencv安装路径的自行判断</p><p>点击configure, 多点几次 直到红色项消失</p><p>点击Generate</p><h1 id="make编译"><a href="#make编译" class="headerlink" title="make编译"></a>make编译</h1><p>cmd进入生成目录</p><p>1.输入 <code>ming32-make</code> 进行编译 （时间会有点长）<br>2.输入 <code>ming32-make install</code> 进行安装</p><p>完成！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/qq_26625581/article/details/78201833" target="_blank" rel="external">Opencv Qt 学习笔记（二）添加contrib外部库</a></p>]]></content>
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dealRAW源码解析</title>
      <link href="/2018/04/19/dealRAW%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/04/19/dealRAW%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>此程序目的是读取raw文件，并检测圆并计算圆心的位置，将位置显示在图片左上角,<br>对函数用法和解析和记录</p><a id="more"></a><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="imshow"><a href="#imshow" class="headerlink" title="imshow"></a>imshow</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">imshow(I)</div><div class="line">imshow(I,[low high]) %可指定显示灰度范围</div></pre></td></tr></table></figure><h2 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf"></a>fprintf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">formatSpec = &apos;X is %4.2f meters or %8.3f mm\n&apos;;</div><div class="line">fprintf(formatSpec,A1,A2);</div><div class="line"></div><div class="line">%将表格数据写入文本文件</div><div class="line">x = 0:.1:1;</div><div class="line">A = [x; exp(x)];</div><div class="line"></div><div class="line">fileID = fopen(&apos;exp.txt&apos;,&apos;w&apos;);</div><div class="line">fprintf(fileID,&apos;%6s %12s\n&apos;,&apos;x&apos;,&apos;exp(x)&apos;);</div><div class="line">fprintf(fileID,&apos;%6.2f %12.8f\n&apos;,A);</div><div class="line">%fprintf(fileID,&apos;%6s %12s\r\n&apos;,&apos;x&apos;,&apos;exp(x)&apos;);</div><div class="line">%fprintf(fileID,&apos;%6.2f %12.8f\r\n&apos;,A); % 记事本打开格式</div><div class="line">fclose(fileID);</div><div class="line"></div><div class="line">type exp.txt %查看文件</div></pre></td></tr></table></figure><h2 id="text"><a href="#text" class="headerlink" title="text"></a>text</h2><p>向数据点添加文本说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">text(pi,0,&apos;\leftarrow sin(\pi)&apos;);</div><div class="line"></div><div class="line">text(2,8,[&apos;X:&apos;,num2str(Xmax-posX+stX-45.4144)],&apos;Color&apos;,&apos;red&apos;,&apos;FontSize&apos;,14);</div><div class="line">text(2,27,[&apos;Y:&apos;,num2str(Ymax-posY+stY-37.1615)],&apos;Color&apos;,&apos;red&apos;,&apos;FontSize&apos;,14);</div><div class="line">text(2,46,[&apos;YD:&apos;,num2str(YD1)],&apos;Color&apos;,&apos;red&apos;,&apos;FontSize&apos;,14);</div></pre></td></tr></table></figure><h1 id="绘图相关"><a href="#绘图相关" class="headerlink" title="绘图相关"></a>绘图相关</h1><h2 id="figure"><a href="#figure" class="headerlink" title="figure"></a>figure</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">figure(&apos;Name&apos;,&apos;Measured Data&apos;);% 设置标题名称</div><div class="line">figure(&apos;Name&apos;,&apos;Measured Data&apos;,&apos;NumberTitle&apos;,&apos;off&apos;);% 关闭图窗编号</div><div class="line"></div><div class="line">f1 = figure;</div><div class="line">f2 = figure;</div><div class="line">figure(f1); % 跳转f1</div><div class="line">scatter((1:20),rand(1,20));</div></pre></td></tr></table></figure><h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title(&apos;My Title&apos;)</div><div class="line">title([&apos;Temperature is &apos;,num2str(c),&apos; C&apos;]) % 包含变量</div><div class="line"></div><div class="line">title(&apos;Case number # 3&apos;,&apos;Color&apos;, &apos;m&apos;) % 改变颜色</div><div class="line">title(&apos;y = \ite^&#123;\lambda t&#125;&apos;,&apos;Color&apos;,&apos;b&apos;) % 使用TeX标记显示特殊符号</div><div class="line">title(&apos;\alpha^2 and X_1&apos;) % 显示下标</div><div class="line"></div><div class="line">title(&#123;&apos;First line&apos;;&apos;Second line&apos;&#125;) % 显示多行</div></pre></td></tr></table></figure><h2 id="plot"><a href="#plot" class="headerlink" title="plot"></a>plot</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">plot(ones(201,1)*posY-stY,((posX-100):(posX+100))-stX,&apos;g-&apos;);</div><div class="line">plot(((posY-100):(posY+100))-stY,ones(201,1)*posX-stX,&apos;g-&apos;);</div><div class="line">plot(Ymax,Xmax,&apos;r+&apos;);</div><div class="line">plot(Ymax,Xmax,&apos;ro&apos;);</div></pre></td></tr></table></figure><p><code>&#39;g-&#39;&#39;r+&#39;&#39;ro&#39;</code> <em>代表线型与颜色</em></p><h2 id="hold"><a href="#hold" class="headerlink" title="hold"></a>hold</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hold on; %开启维持，禁止axes刷新</div><div class="line">hold off; %关闭维持，</div></pre></td></tr></table></figure><h2 id="max"><a href="#max" class="headerlink" title="max"></a>max</h2><p>数组中的最大元素<br><code>M = max(A)</code>1.A是一维向量，返回最大值 2.A是二维数组，返回一行各列最大值</p><p><code>M = max(A,[],2)</code> 返回各行最大值</p><p><code>[M,I] = max(A)</code> 加上最大值的索引</p><p><code>B = 5;C = max(A,B)</code> 最大元素比较</p><p><code>[M,I] = max(A(:))</code> 返回全数组最大值及索引</p><h2 id="round"><a href="#round" class="headerlink" title="round"></a>round</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Y = round(X) % 四舍五入最近的整数</div><div class="line">Y = round(X,N) % 保留N位小数</div></pre></td></tr></table></figure><h2 id="mod"><a href="#mod" class="headerlink" title="mod"></a>mod</h2><p><code>b = mod(a,m) % 除后余数</code></p><h2 id="reshape"><a href="#reshape" class="headerlink" title="reshape"></a>reshape</h2><p><code>B = reshape(A,[5,2]) % 重构为5x2矩阵</code></p><h2 id="矩阵操作"><a href="#矩阵操作" class="headerlink" title="矩阵操作"></a>矩阵操作</h2><p><code>zt = fliplr(zt); % 左右镜像</code></p><p><code>zt = flipud(zt); % 上下镜像</code></p><p><code>zt = rot90(zt,2); % 旋转两次90°</code></p><p><code>zt = zt&#39; % 转置</code></p><h1 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h1><blockquote><p>打开文件返回文件标识符<br>fileID = fopen(filename)<br>fileID = fopen(filename,permission)<br>fileID = fopen(filename,permission,machinefmt,encodingIn)</p><p>返回文件打开出错信息<br>[fileID,errmsg] = fopen( ___ )</p><p>获取已打开文件信息<br>fIDs = fopen(‘all’)<br>filename = fopen(fileID)<br>[filename,permission,machinefmt,encodingOut] = fopen(fileID)</p></blockquote><figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fin = fopen(<span class="string">'3.raw'</span>,<span class="string">'r'</span>);</div><div class="line"></div><div class="line">[fileID,errmsg] = fopen(filename); <span class="comment">%如没正常打开，则显示错误信息</span></div><div class="line"><span class="built_in">disp</span>(errmsg);</div><div class="line"></div><div class="line">fileID = fopen(<span class="string">'japanese_out.txt'</span>,<span class="string">'w'</span>,<span class="string">'UTF-8'</span>); <span class="comment">%以某种格式打开</span></div><div class="line"></div><div class="line">fIDs = fopen(<span class="string">'all'</span>);<span class="comment">%获取所有已打开文件标识符</span></div><div class="line">[filename,~,~,encoding] = fopen(fIDs);<span class="comment">%返回打开文件信息</span></div></pre></td></tr></table></figure><h1 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h1><p>读取二进制文件中的数据</p><p><code>I = fread(fileID,&#39;uint16=&gt;uint16&#39;);</code></p><p><code>A = fread(fileID,[3 3],&#39;double&#39;)</code></p><p><code>A = fread(fileID,&#39;*char&#39;)&#39;;</code></p><p>一参文件标识符，其余为读取格式</p><h1 id="imbinarize"><a href="#imbinarize" class="headerlink" title="imbinarize"></a>imbinarize</h1><p>转为二值图像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BW = imbinarize(I)</div><div class="line">BW = imbinarize(I, &apos;adaptive&apos;); %适应性阈值 </div><div class="line">BW = imbinarize(I,method)</div></pre></td></tr></table></figure></p><h1 id="regionprops"><a href="#regionprops" class="headerlink" title="regionprops"></a>regionprops</h1><p>可计算二值图像上区域的质心等度量属性</p><p>计算圆形物体中心和半径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Ipart2 = im2bw(Ipart1,0.3);%转为二值</div><div class="line">stats = regionprops(Ipart2,&apos;centroid&apos;,&apos;MajorAxisLength&apos;,&apos;MinorAxisLength&apos;,&apos;Eccentricity&apos;);</div><div class="line">centers  = cat(1, stats.Centroid);</div><div class="line">diameters = (cat(1,stats.MajorAxisLength)+cat(1,stats.MinorAxisLength))/2;</div><div class="line">radii = diameters/2;</div><div class="line">YD= cat(1,stats.MinorAxisLength)./cat(1,stats.MajorAxisLength);</div></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">centers = stats.Centroid;</div><div class="line">diameters = mean([stats.MajorAxisLength stats.MinorAxisLength],2);</div><div class="line">radii = diameters/2;</div></pre></td></tr></table></figure></p><p><code>mean</code><em>取数组均值</em></p><p><code>radii</code><em>半径</em></p><p><code>YD</code> <em>圆度</em></p><p><code>&#39;MajorAxisLength&#39;,&#39;MinorAxisLength&#39;</code><em>表示横竖两条直径</em></p><h1 id="imshowpair"><a href="#imshowpair" class="headerlink" title="imshowpair"></a>imshowpair</h1><p>比较图像之间的差异</p><p><code>imshowpair(original, distorted, &#39;montage&#39;)</code><br><code>imshowpair(original, distorted,&#39;ColorChannels&#39;,&#39;red-cyan&#39;)</code></p><p>obj = imshowpair(A,B)<br>obj = imshowpair(A,RA,B,RB)<br>obj = imshowpair(<strong><em>,method)<br>obj = imshowpair(</em></strong>,Name,Value)</p><ul><li>‘falsecolor’   创建显示A和B的复合 RGB 图像, 以不同的色带覆盖。复合图像中的灰色区域显示了两个图像的强度相同。洋红色和绿色区域显示强度不同的地方。这是默认方法。  </li><li>‘blend’    使用 alpha 混合叠加A和B 。</li><li>‘checkerboard’     使用A和B中的交替矩形区域创建图像.</li><li>‘diff’     从A和B创建差异图像.</li><li><p>‘montage’  将A和B置于同一图像中的相邻位置。</p></li><li><p>‘ColorChannels’ -每个输入图像的输出颜色通道</p></li></ul>]]></content>
      
      <categories>
          
          <category> Matlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>QImage与Mat的相互转换</title>
      <link href="/2018/01/25/QImage%E4%B8%8EMat%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/01/25/QImage%E4%B8%8EMat%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>OpenCV毕竟只是一个库，希望OpenCV处理的图片能在Qt的界面程序中显示出来，比如Label控件，下面的程序就是实现将图片进行简单的边缘处理，再显示在label控件。</p><a id="more"></a><h1 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h1><p>MainWindow.h<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMessageBox&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QImage&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow</div><div class="line">&#123;</div><div class="line">    Q_OBJECT</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</div><div class="line">    ~MainWindow();</div><div class="line"></div><div class="line">    QString openFileName;<span class="comment">//保存图片路径</span></div><div class="line">    QImage img;          <span class="comment">//QImage存储图片</span></div><div class="line">    QImage scaleImg;     <span class="comment">//为了显示在label中压缩后的图片</span></div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Ui::MainWindow *ui;</div><div class="line"></div><div class="line"><span class="keyword">private</span> slots:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">openFileSlot</span><span class="params">()</span></span>;<span class="comment">//qt打开图片</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cannySlot</span><span class="params">()</span></span>;<span class="comment">//执行canny算子并显示</span></div><div class="line">    <span class="function">Mat <span class="title">QImage2cvMat</span><span class="params">(QImage image)</span></span>;<span class="comment">//QImage转Mat</span></div><div class="line">    <span class="function">QImage <span class="title">cvMat2QImage</span><span class="params">(<span class="keyword">const</span> Mat&amp; mat)</span></span>;<span class="comment">//Mat转QImage</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></div></pre></td></tr></table></figure></p><p>MainWindow.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    QObject::connect(ui-&gt;openButton,SIGNAL(clicked()),<span class="keyword">this</span>,SLOT(openFileSlot()));</div><div class="line">    QObject::connect(ui-&gt;cannyButton,SIGNAL(clicked()),<span class="keyword">this</span>,SLOT(cannySlot()));</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//打开图片按钮对应功能</span></div><div class="line"><span class="keyword">void</span> MainWindow::openFileSlot()</div><div class="line">&#123;</div><div class="line">    <span class="comment">//得到文件名</span></div><div class="line">    openFileName=QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">"打开文件"</span>,QDir::currentPath());</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(! ( img.load(openFileName) ) ) <span class="comment">//加载图像</span></div><div class="line">    &#123;</div><div class="line">        QMessageBox::information(<span class="keyword">this</span>,</div><div class="line">                                 <span class="string">"打开图像失败"</span>,</div><div class="line">                                 <span class="string">"打开图像失败!"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//使图片合适地放到label中</span></div><div class="line">    <span class="keyword">if</span>((img.width()/img.height())&gt;(ui-&gt;srcLabel-&gt;width()/ui-&gt;srcLabel-&gt;height()))</div><div class="line">        scaleImg = img.scaledToWidth(ui-&gt;srcLabel-&gt;width(),Qt::FastTransformation);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        scaleImg = img.scaledToHeight(ui-&gt;srcLabel-&gt;height(),Qt::FastTransformation);</div><div class="line">    ui-&gt;srcLabel-&gt;setPixmap(QPixmap::fromImage(scaleImg));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//canny算子按钮对应功能</span></div><div class="line"><span class="keyword">void</span> MainWindow::cannySlot()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(openFileName.isEmpty())<span class="comment">//检测是否选中了文件</span></div><div class="line">    &#123;</div><div class="line">        QMessageBox::information(<span class="keyword">this</span>,<span class="string">"警告！"</span>,<span class="string">"没图片算个卵！"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Mat matImg = QImage2cvMat(img);</div><div class="line">    Mat matImgGray,edge;</div><div class="line"></div><div class="line">    cvtColor(matImg,matImgGray,COLOR_RGB2GRAY);</div><div class="line"></div><div class="line">    <span class="comment">//3*3降噪</span></div><div class="line">    blur(matImgGray,edge,Size(<span class="number">3</span>,<span class="number">3</span>));</div><div class="line"></div><div class="line"><span class="comment">//    GaussianBlur(matImgGray,edge,Size(3,3),0,0);//高斯降噪</span></div><div class="line"></div><div class="line"><span class="comment">//边缘处理20,60可变</span></div><div class="line">    Canny(edge,edge,<span class="number">20</span>,<span class="number">60</span>,<span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="comment">//使图片合适地放到label中</span></div><div class="line">    <span class="keyword">if</span>((img.width()/img.height())&gt;(ui-&gt;dstLabel-&gt;width()/ui-&gt;dstLabel-&gt;height()))</div><div class="line">        scaleImg = img.scaledToWidth(ui-&gt;dstLabel-&gt;width(),Qt::FastTransformation);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        scaleImg = img.scaledToHeight(ui-&gt;dstLabel-&gt;height(),Qt::FastTransformation);</div><div class="line">    ui-&gt;dstLabel-&gt;setPixmap(QPixmap::fromImage(scaleImg));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//QImage转Mat</span></div><div class="line">Mat MainWindow::QImage2cvMat(QImage image)</div><div class="line">&#123;</div><div class="line">    cv::Mat mat;</div><div class="line">    qDebug() &lt;&lt; image.format();</div><div class="line">    <span class="keyword">switch</span>(image.format())</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">case</span> QImage::Format_ARGB32:</div><div class="line">    <span class="keyword">case</span> QImage::Format_RGB32:</div><div class="line">    <span class="keyword">case</span> QImage::Format_ARGB32_Premultiplied:</div><div class="line">        mat = cv::Mat(image.height(), image.width(), CV_8UC4, (<span class="keyword">void</span>*)image.constBits(), image.bytesPerLine());</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> QImage::Format_RGB888:</div><div class="line">        mat = cv::Mat(image.height(), image.width(), CV_8UC3, (<span class="keyword">void</span>*)image.constBits(), image.bytesPerLine());</div><div class="line">        cv::cvtColor(mat, mat, CV_BGR2RGB);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> QImage::Format_Indexed8:</div><div class="line">        mat = cv::Mat(image.height(), image.width(), CV_8UC1, (<span class="keyword">void</span>*)image.constBits(), image.bytesPerLine());</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mat;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Mat转QImage</span></div><div class="line">QImage MainWindow::cvMat2QImage(<span class="keyword">const</span> cv::Mat&amp; mat)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 8-bits unsigned, NO. OF CHANNELS = 1</span></div><div class="line">    <span class="keyword">if</span>(mat.type() == CV_8UC1)</div><div class="line">    &#123;</div><div class="line">        <span class="function">QImage <span class="title">image</span><span class="params">(mat.cols, mat.rows, QImage::Format_Indexed8)</span></span>;</div><div class="line">        <span class="comment">// Set the color table (used to translate colour indexes to qRgb values)</span></div><div class="line">        image.setColorCount(<span class="number">256</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</div><div class="line">        &#123;</div><div class="line">            image.setColor(i, qRgb(i, i, i));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Copy input Mat</span></div><div class="line">        uchar *pSrc = mat.data;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; mat.rows; row ++)</div><div class="line">        &#123;</div><div class="line">            uchar *pDest = image.scanLine(row);</div><div class="line">            <span class="built_in">memcpy</span>(pDest, pSrc, mat.cols);</div><div class="line">            pSrc += mat.step;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> image;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 8-bits unsigned, NO. OF CHANNELS = 3</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mat.type() == CV_8UC3)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Copy input Mat</span></div><div class="line">        <span class="keyword">const</span> uchar *pSrc = (<span class="keyword">const</span> uchar*)mat.data;</div><div class="line">        <span class="comment">// Create QImage with same dimensions as input Mat</span></div><div class="line">        <span class="function">QImage <span class="title">image</span><span class="params">(pSrc, mat.cols, mat.rows, mat.step, QImage::Format_RGB888)</span></span>;</div><div class="line">        <span class="keyword">return</span> image.rgbSwapped();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mat.type() == CV_8UC4)</div><div class="line">    &#123;</div><div class="line">        qDebug() &lt;&lt; <span class="string">"CV_8UC4"</span>;</div><div class="line">        <span class="comment">// Copy input Mat</span></div><div class="line">        <span class="keyword">const</span> uchar *pSrc = (<span class="keyword">const</span> uchar*)mat.data;</div><div class="line">        <span class="comment">// Create QImage with same dimensions as input Mat</span></div><div class="line">        <span class="function">QImage <span class="title">image</span><span class="params">(pSrc, mat.cols, mat.rows, mat.step, QImage::Format_ARGB32)</span></span>;</div><div class="line">        <span class="keyword">return</span> image.copy();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        qDebug() &lt;&lt; <span class="string">"ERROR: Mat could not be converted to QImage."</span>;</div><div class="line">        <span class="keyword">return</span> QImage();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>跳一跳辅助使用教程(python)</title>
      <link href="/2018/01/02/%E8%B7%B3%E4%B8%80%E8%B7%B3%E8%BE%85%E5%8A%A9%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-python/"/>
      <url>/2018/01/02/%E8%B7%B3%E4%B8%80%E8%B7%B3%E8%BE%85%E5%8A%A9%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-python/</url>
      <content type="html"><![CDATA[<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><blockquote><p>python辅助作者github账号为：<a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="external">wangshub</a>。</p><p>作者的知乎文章：<a href="https://zhuanlan.zhihu.com/p/32452473" target="_blank" rel="external">教你用Python来玩微信跳一跳</a></p></blockquote><p>膜拜大神！</p><h1 id="我的环境和工具"><a href="#我的环境和工具" class="headerlink" title="我的环境和工具"></a>我的环境和工具</h1><ul><li>windows10</li><li><p>python3.6<br>安装方法可单独搜索，包括下载安装包和安装好后配置环境变量（百度）</p></li><li><p>ADB工具包<br> <a href="https://adb.clockworkmod.com/" target="_blank" rel="external">ADB工具包</a></p></li></ul><ul><li>安卓手机和其手机驱动</li></ul><a id="more"></a><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>让电脑利用ADB工具可以操纵手机</p><ol><li>以我的手机为例<ul><li>用数据线连接电脑，选择传输文件，并在开发者选项中打开USB调试，我这边自动安装好了驱动，否则要去官网下载</li><li>打开设备管理器有android phone项，并且没有黄色感叹号，说明连接成功</li></ul></li><li><p>下载ADB工具包，然后配置环境变量，就是<code>Universal ADB Drivers</code>安装的目录</p></li><li><p>打开cmd，输入<code>adb devices</code>,查看是否能找到设备</p></li><li><p>adb命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">adb kill-server //关闭服务</div><div class="line">adb start-server //打开服务</div><div class="line">adb devices     //查看设备</div><div class="line">adb shell</div><div class="line"></div><div class="line">//手机截图并pull到电脑</div><div class="line">adb shell screencap -p /sdcard/autojump.png</div><div class="line">adb pull /sdcard/autojump.png  </div><div class="line"></div><div class="line">//模拟按压屏幕</div><div class="line">adb shell input swipe x y x y time(ms)</div></pre></td></tr></table></figure></li></ol><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>去原作者的github,下载整个压缩包，解压出来</p><p>打开cmd，cd到解压出来的文件夹，执行<code>pip install -r requirements.txt</code>安装代码所需要的库</p><p>安装完之后，手机也连上了，打开游戏界面，点击开始游戏，</p><p>cmd中输入<code>wechat_jump_auto.py</code>就可以自动运行了</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.52aite.cn/archives/601" target="_blank" rel="external">使用python玩跳一跳超详细使用教程</a><br><a href="https://github.com/wangshub/wechat_jump_game/wiki/Android-%E5%92%8C-iOS-%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4" target="_blank" rel="external">作者github</a></p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenCV之RNG随机数生成器</title>
      <link href="/2017/10/29/OpenCV%E4%B9%8BRNG%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2017/10/29/OpenCV%E4%B9%8BRNG%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>OpenCV中C++的RNG类可以压缩一个64位的i整数并可以得到scalar和array的随机<br>数。目前的版本支持<strong>均匀分布随机数</strong>和<strong>Gaussian分布随机数</strong>。随机数的产生采用的<br>是Multiply-With-Carry算法和Ziggurat算法。其构造函数的初始化可以传入一个<br>64位的整型参数作为随机数产生器的初值。</p></blockquote><ul><li>next     可以取出下一个随机数</li><li>uniform  返回指定范围的随机数</li><li>gaussian 返回一个高斯随机数</li><li>fill     随机数填充矩阵</li></ul><p>环境 Qt5.9.1 + OpenCv3.1.0</p><a id="more"></a><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">RNG rng;</div><div class="line"></div><div class="line">   cv::Mat image1(500,500,CV_8UC3,</div><div class="line">   cv::Scalar(rng.uniform(0,255),rng.uniform(0,255),rng.uniform(0,255)));  </div><div class="line">   cv::namedWindow(&quot;image 1&quot;);  </div><div class="line">   imshow(&quot;image 1&quot;, image1);  </div><div class="line"> </div><div class="line">   cv::Mat image2(500,500,CV_32FC3,</div><div class="line">   cv::Scalar(rng.uniform(0.0,1.0),rng.uniform(0.0,1.0),rng.uniform(0.0,1.0)));  </div><div class="line">   cv::namedWindow(&quot;image 2&quot;);  </div><div class="line">   imshow(&quot;image 2&quot;, image2);</div></pre></td></tr></table></figure><p>其中 rng.uniform(i,j)的作用就是获取在某一范围之内的随机数，如果ij类型<br>需要相同，返回值为与其同类型的随机数。</p><p>需要注意的是rng.uniform(0,1.0)会因类型不同而报错，<br>rng.uniform(0,1)只能返回0。</p><p>参考：<a href="http://blog.csdn.net/zyttae/article/details/41719349?readlog" target="_blank" rel="external">OpenCV学习(十一)之随机数生成器RNG</a></p>]]></content>
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Qt进程间通信</title>
      <link href="/2017/10/29/Qt%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2017/10/29/Qt%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<h1 id="共享内存QShareBuffer"><a href="#共享内存QShareBuffer" class="headerlink" title="共享内存QShareBuffer"></a>共享内存QShareBuffer</h1><p>以共享一个图片为例</p><p>头文件添加<code>QShareMemory memory;</code></p><h2 id="图片加载到共享内存"><a href="#图片加载到共享内存" class="headerlink" title="图片加载到共享内存"></a>图片加载到共享内存</h2><p>先申请一个缓冲区，将图片加载到缓冲区，利用memcpy将缓冲区的内容copy到共享内存<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::addimageSlot()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(memory.isAttached())</div><div class="line">    &#123;</div><div class="line">        memory.detach();<span class="comment">//如有共享内存则删除，将共享内存与程序分离</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    QString openFileName = QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">"打开文件"</span>,QDir::currentPath(),<span class="string">"文件(*.jpg *.png *.bmp)"</span>);</div><div class="line"></div><div class="line">    QImage image;</div><div class="line">    <span class="keyword">if</span> (!image.load(openFileName))</div><div class="line">    &#123;</div><div class="line">       ui-&gt;imageLabel-&gt;setText(<span class="string">"Selected file is not an image, please select another."</span>);</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ui-&gt;imageLabel-&gt;setPixmap(QPixmap::fromImage(image));<span class="comment">//QPixmap与QImage见下</span></div><div class="line"></div><div class="line">    <span class="comment">//先申请一个缓冲区，将图片加载到缓冲区，利用memcpy将缓冲区的内容copy到共享内存</span></div><div class="line">    <span class="comment">//中间注意size</span></div><div class="line"></div><div class="line">    <span class="comment">//将图片加入到一块缓冲区</span></div><div class="line">    QBuffer buffer;</div><div class="line">    buffer.open(QBuffer::ReadWrite);<span class="comment">//设置读写属性</span></div><div class="line">    <span class="function">QDataStream <span class="title">out</span><span class="params">(&amp;buffer)</span></span>;<span class="comment">//设置数据流，指向buffer</span></div><div class="line">    out&lt;&lt;image;<span class="comment">//将图片通过文件流存入buffer</span></div><div class="line">    <span class="comment">//判断</span></div><div class="line">    <span class="keyword">int</span> size  = buffer.size();</div><div class="line">    <span class="keyword">if</span> (!memory.create(size))</div><div class="line">    &#123;</div><div class="line">        ui-&gt;imageLabel-&gt;setText(<span class="string">"不能创造共享内存！"</span>);</div><div class="line"><span class="comment">//        qDebug()&lt;&lt;memory.errorString();</span></div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//从缓冲区到共享内存</span></div><div class="line">    memory.lock();</div><div class="line">    <span class="keyword">char</span> *to = (<span class="keyword">char</span>*)memory.data();<span class="comment">//返回一个共享内存内容的指针</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *from = buffer.data().data();</div><div class="line">    memcpy(to,from,qMin(memory.size(),size));</div><div class="line">    memory.unlock();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="从共享内存读取图片"><a href="#从共享内存读取图片" class="headerlink" title="从共享内存读取图片"></a>从共享内存读取图片</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::getMemorySlot()</div><div class="line">&#123;</div><div class="line">    <span class="comment">//判断共享内存是否存在</span></div><div class="line">    <span class="keyword">if</span>(!memory.attach())</div><div class="line">    &#123;</div><div class="line">        ui-&gt;imageLabel-&gt;setText(<span class="string">"无共享内存，请先加载一个图片"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    QBuffer buffer;</div><div class="line">    <span class="function">QDataStream <span class="title">in</span><span class="params">(&amp;buffer)</span></span>;</div><div class="line">    QImage image;</div><div class="line"></div><div class="line">    memory.lock();</div><div class="line">    buffer.setData((<span class="keyword">char</span>*)memory.constData(),memory.size());<span class="comment">//</span></div><div class="line">    buffer.open(QBuffer::ReadOnly);</div><div class="line">    in&gt;&gt;image;</div><div class="line">    memory.unlock();</div><div class="line"></div><div class="line">    memory.detach();<span class="comment">//分离，删除</span></div><div class="line">    ui-&gt;imageLabel-&gt;setPixmap(QPixmap::fromImage(image));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="剪贴板QClipboard"><a href="#剪贴板QClipboard" class="headerlink" title="剪贴板QClipboard"></a>剪贴板QClipboard</h1><p>剪贴板也算一种进程通信的方式</p><ul><li>写</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">QClipboard *clipboard = QApplication::clipboard();</div><div class="line">clipboard-&gt;setPixmap(this-&gt;Pixmap);//把图片加到剪贴板</div></pre></td></tr></table></figure><ul><li>读</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">QClipboard *preclipboard = QApplication::clipboard();</div><div class="line">QSize pixmapSize = preclipboard-&gt;pixmap().size()*0.8;//将图片原尺寸8/10缩放</div><div class="line">ui-&gt;previewLabel-&gt;setPixmap(preclipboard-&gt;pixmap().scaled(pixmapSize));</div></pre></td></tr></table></figure><h1 id="QPixmap与QImage"><a href="#QPixmap与QImage" class="headerlink" title="QPixmap与QImage"></a>QPixmap与QImage</h1><p>QPixmap依赖于硬件，QImage不依赖于硬件。<br>QPixmap主要是用于绘图，针对屏幕显示而最佳化设计，QImage主要是为图像I/O、图片访问和像素修改而设计的。</p><p>当图片小的情况下，直接用QPixmap进行加载，画图时无所谓，<br>当图片大的时候如果直接用QPixmap进行加载，会占很大的内存，一般一张几十K的图片，用QPixmap加载进来会放大很多倍，<br>所以一般图片大的情况下，用QImage进行加载，然后转乘QPixmap用户绘制。QPixmap绘制效果是最好的。 </p><p>同时QPimap主要用于加速显示，QImag主要是图像处理 </p>]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>QtCreator快捷键</title>
      <link href="/2017/10/22/QtCreator%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2017/10/22/QtCreator%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p><strong>QtCreator快捷键</strong></p><h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><ul><li><p>F1        查看帮助</p></li><li><p>F2         声明与定义之间切换</p></li><li><p>F4         头文件与源文件切换/ui界面切换信号与槽编辑</p></li><li><p>ctrl + R         运行</p></li><li><p>Alt + Enter     自动定义</p></li><li><p>Alt + Shift + R      界面ui预览</p></li><li><p>Ctrl + Shift + R   全局修改变量名</p></li><li><p>Ctrl + E      按完后按2上下分栏，3左右分栏，1取消分栏</p></li><li><p>Ctrl + /      注释选中代码</p></li></ul>]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Qt父子对象关系</title>
      <link href="/2017/10/22/Qt%E7%88%B6%E5%AD%90%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB/"/>
      <url>/2017/10/22/Qt%E7%88%B6%E5%AD%90%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>发现Qt中new好的对象不需要delete，但这在C++中是不允许的。</p><h1 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h1><p>QT的父子对象机制是在 QWidget和QOject中实现的。<br>当我们使用父对象来创建一个对象的时候，父对象会把这个对象添加到自己的子对象列表中。<br>当这个父对象被删除的时候，它会遍历它的子对象类表并且删除每一个子对象，<br>然后子对象们自己再删除它们自己的子对象，这样递归调用直到所有对象都被删除。</p><a id="more"></a><p>在QT中有些是可以不删除的，如果你申请的这个类继承于QObject父类，父对象被删除的时候，它会遍历它的子对象类表并且删除每一个子对象，</p><p>Qt有一个父子对象关系，但在其他C++场合一定要delete，否则会内存泄漏</p><p>建议：尽量不要new，直接声明对象，如：QFile Data;</p><p>参考：<a href="http://blog.csdn.net/dbzhang800/article/details/6300025" target="_blank" rel="external">从Qt的delete说开来</a></p>]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++类的三种调用方式区别</title>
      <link href="/2017/10/22/C-%E7%B1%BB%E7%9A%84%E4%B8%89%E7%A7%8D%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/10/22/C-%E7%B1%BB%E7%9A%84%E4%B8%89%E7%A7%8D%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>下面为三种方法调用，得到的结果相同，讨论用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">class A</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    void output()</div><div class="line">    &#123;</div><div class="line">        cout&lt;&lt;&quot;output test&quot;&lt;&lt;endl;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    A a;//第一种</div><div class="line">    a.output();</div><div class="line"></div><div class="line">    A *b = NULL;//第二种</div><div class="line">    b-&gt;output();</div><div class="line"></div><div class="line">    A *c = new A;//第三种</div><div class="line">    c-&gt;output();</div><div class="line">    delete c;</div><div class="line"></div><div class="line">    return 0;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul><li><p>第一种 直接在栈上分配空间，函数执行完生命周期结束，</p></li><li><p>第二种 <em>现在的理解</em>只有调用类中的静态成员函数才使用</p></li><li><p>第三种 在在堆上分配空间，栈上空间自动回收，堆空间需要程序员手动回收</p></li></ul><p>当需要大空间时用new，暂时使用对象，并内存使用不大时直接定义对象</p><h1 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h1><p>C++类静态成员与类静态成员函数</p><ul><li><p>静态成员的值对所有的对象是一样的。静态成员可以被初始化，但只能在类体外进行初始化。</p></li><li><p>静态成员是类所有的对象的共享的成员，而不是某个对象的成员。它在对象中不占用存储空间，这个属性为整个类所共有，不属于任何一个具体对象。</p></li><li><p>静态成员函数可以直接访问该类的静态数据和函数成员，而访问非静态数据成员必须通过参数传递的方式得到一个对象名，然后通过对象名来访问。</p></li><li><p>静态成员函数在类外实现时候无须加static关键字</p></li><li><p>静态成员函数没有this指针，它不能返回非静态成员，因为除了对象会调用它外，类本身也可以调用。</p></li></ul><p>参考：<a href="http://blog.csdn.net/clc4210408/article/details/6775824" target="_blank" rel="external">C++类静态成员与类静态成员函数</a></p>]]></content>
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Qt记事本实例源码学习</title>
      <link href="/2017/10/22/Qt%E8%AE%B0%E4%BA%8B%E6%9C%AC%E5%AE%9E%E4%BE%8B%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/10/22/Qt%E8%AE%B0%E4%BA%8B%E6%9C%AC%E5%AE%9E%E4%BE%8B%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h1><ul><li>打开文件模板</li><li>保存文件</li><li>获取系统当前时间</li><li>设置文本字体</li><li>设置文本颜色</li><li>使用默认浏览器打开一个网址</li><li>打开一个Dialog</li><li><p>关闭事件</p></li><li><p>添加程序图标</p></li><li>添加菜单图标</li><li>添加TextEdit背景图</li></ul><a id="more"></a><h1 id="打开文件模板"><a href="#打开文件模板" class="headerlink" title="打开文件模板"></a>打开文件模板</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">void MainWindow::openFileSlot()</div><div class="line">&#123;</div><div class="line">    //得到文件名</div><div class="line">    QString openFileName=QFileDialog::getOpenFileName(this,&quot;打开文件&quot;,QDir::currentPath());</div><div class="line"></div><div class="line">//    qDebug()&lt;&lt;&quot;file name is&quot;&lt;&lt;openFileName; //调试用</div><div class="line"></div><div class="line">    //检测是否选中了文件</div><div class="line">    if(openFileName.isEmpty())</div><div class="line">    &#123;</div><div class="line">        QMessageBox::information(this,&quot;警告！&quot;,&quot;请选择一个文件！&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //利用这个openFileName打开文件</div><div class="line">    QFile *file = new QFile;//生成一个文件对象</div><div class="line">    file-&gt;setFileName(openFileName);</div><div class="line">    bool ok = file-&gt;open(QIODevice::ReadOnly);//打开经典语句</div><div class="line"></div><div class="line">    if(ok)//如果打开成功</div><div class="line">    &#123;</div><div class="line">        QTextStream in(file);</div><div class="line">        ui-&gt;textEdit-&gt;setText(in.readAll());//读并显示</div><div class="line">        file-&gt;close();</div><div class="line">        delete file;   //释放内存</div><div class="line"></div><div class="line">        /*str = path.section(&apos;/&apos;, -1); // str == &quot;myapp&quot;*/</div><div class="line">        QString name = openFileName.section(&apos;/&apos;,-1);//字符串分节操作</div><div class="line">        this-&gt;setWindowTitle(name);</div><div class="line">    &#125;</div><div class="line">    else//失败</div><div class="line">    &#123;</div><div class="line">//        QMessageBox::information(this,&quot;提示&quot;,&quot;打开文件失败&quot;+file-&gt;errorString());</div><div class="line">//        return;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">void MainWindow::saveFileSlot()</div><div class="line">&#123;</div><div class="line">    //打开保存文件对话框，获取保存文件路径</div><div class="line">    QString saveFileName = QFileDialog::getSaveFileName(this, &quot;保存文件&quot;,</div><div class="line">                               QDir::currentPath(),</div><div class="line">                               &quot;文档 (*.txt *.doc *.bat);;Text files (*.txt)&quot;);</div><div class="line">    //检测路径是否正确</div><div class="line">    if(saveFileName.isEmpty())</div><div class="line">    &#123;</div><div class="line">        QMessageBox::information(this,&quot;提示&quot;,&quot;文件名不能为空！&quot;);</div><div class="line">        return ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //file类似一个水箱，QTextStream类似一个管道</div><div class="line">    QFile *file = new QFile;//生成一个文件对象</div><div class="line">    file-&gt;setFileName(saveFileName);</div><div class="line">    bool ok = file-&gt;open(QIODevice::WriteOnly);//打开经典语句</div><div class="line"></div><div class="line">    if(ok)//如果打开成功</div><div class="line">    &#123;</div><div class="line">        QTextStream out(file);</div><div class="line">        out&lt;&lt;ui-&gt;textEdit-&gt;toPlainText();//读并显示</div><div class="line">        file-&gt;close();</div><div class="line">        delete file;   //关闭</div><div class="line">    &#125;</div><div class="line">    else//失败</div><div class="line">    &#123;</div><div class="line">        QMessageBox::information(this,&quot;提示&quot;,&quot;保存文件失败&quot;+file-&gt;errorString());</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="获取系统当前时间"><a href="#获取系统当前时间" class="headerlink" title="获取系统当前时间"></a>获取系统当前时间</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::setDataTimeSlot()</div><div class="line">&#123;</div><div class="line">    <span class="comment">//获取当前时间</span></div><div class="line">    QDateTime current= QDateTime::currentDateTime();</div><div class="line">    QString time = current.toString(<span class="string">"yyyy-M-dd hh:mm:ss"</span>);更改格式</div><div class="line"></div><div class="line">    <span class="comment">//添加到文本的末尾</span></div><div class="line">    ui-&gt;textEdit-&gt;append(time);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="设置文本字体"><a href="#设置文本字体" class="headerlink" title="设置文本字体"></a>设置文本字体</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::setFontSlot()</div><div class="line">&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">bool ok;</span></div><div class="line"><span class="comment">QFont font = QFontDialog::getFont(</span></div><div class="line"><span class="comment">                &amp;ok, QFont("Helvetica [Cronyx]", 10), this);</span></div><div class="line"><span class="comment">if (ok) &#123;</span></div><div class="line"><span class="comment">    // the user clicked OK and font is set to the font the user selected</span></div><div class="line"><span class="comment">&#125; else &#123;</span></div><div class="line"><span class="comment">    // the user canceled the dialog; font is set to the initial</span></div><div class="line"><span class="comment">    // value, in this case Helvetica [Cronyx], 10</span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment">*/</span></div><div class="line">    <span class="keyword">bool</span> ok;</div><div class="line">    QFont font = QFontDialog::getFont(&amp;ok,<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span>(ok)</div><div class="line">    &#123;</div><div class="line">       ui-&gt;textEdit-&gt;setFont(font);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="设置文本颜色"><a href="#设置文本颜色" class="headerlink" title="设置文本颜色"></a>设置文本颜色</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::setColorSlot()</div><div class="line">&#123;</div><div class="line">    <span class="comment">/* const QColorDialog::ColorDialogOptions options = QFlag(colorDialogOptionsWidget-&gt;value());</span></div><div class="line"><span class="comment">    const QColor color = QColorDialog::getColor(Qt::green, this, "Select Color", options);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">    if (color.isValid()) &#123;</span></div><div class="line"><span class="comment">        colorLabel-&gt;setText(color.name());</span></div><div class="line"><span class="comment">        colorLabel-&gt;setPalette(QPalette(color));</span></div><div class="line"><span class="comment">        colorLabel-&gt;setAutoFillBackground(true);</span></div><div class="line"><span class="comment">    &#125;*/</span></div><div class="line"></div><div class="line">    <span class="comment">//调用颜色对话框</span></div><div class="line">    QColor color = QColorDialog::getColor(Qt::red,<span class="keyword">this</span>,<span class="string">"选择颜色"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (color.isValid())</div><div class="line">    &#123;</div><div class="line">        ui-&gt;textEdit-&gt;setTextColor(color);<span class="comment">//设置文本颜色</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="使用默认浏览器打开一个网址"><a href="#使用默认浏览器打开一个网址" class="headerlink" title="使用默认浏览器打开一个网址"></a>使用默认浏览器打开一个网址</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::aboutWebsiteSlot()</div><div class="line">&#123;</div><div class="line">    <span class="comment">/*QDesktopServices::openUrl(</span></div><div class="line"><span class="comment">     * QUrl("file:///C:/Documents and Settings/All Users/Desktop", QUrl::TolerantMode));*/</span></div><div class="line"></div><div class="line">    QDesktopServices::openUrl(QUrl(<span class="string">"https://www.baidu.com/"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="打开一个Dialog"><a href="#打开一个Dialog" class="headerlink" title="打开一个Dialog"></a>打开一个Dialog</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::openAboutDialog()</div><div class="line">&#123;</div><div class="line">    about *aboutDialog = <span class="keyword">new</span> about;</div><div class="line">    aboutDialog-&gt;show();<span class="comment">//非模态//aboutDialog.exec();</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="关闭事件"><a href="#关闭事件" class="headerlink" title="关闭事件"></a>关闭事件</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::closeEvent(QCloseEvent *event)</div><div class="line">&#123;</div><div class="line">    <span class="comment">/*void MainWindow::closeEvent(QCloseEvent *event)</span></div><div class="line"><span class="comment">&#123;</span></div><div class="line"><span class="comment">    if (maybeSave()) &#123;</span></div><div class="line"><span class="comment">        writeSettings();</span></div><div class="line"><span class="comment">        event-&gt;accept();</span></div><div class="line"><span class="comment">    &#125; else &#123;</span></div><div class="line"><span class="comment">        event-&gt;ignore();</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">&#125;*/</span></div><div class="line">    <span class="comment">//如果文本发生改变</span></div><div class="line">    <span class="keyword">if</span>(ui-&gt;textEdit-&gt;document()-&gt;isModified())</div><div class="line">    &#123;</div><div class="line">        QMessageBox msgBox;</div><div class="line">        msgBox.setText(<span class="string">"文件已经变更："</span>);</div><div class="line">        msgBox.setInformativeText(<span class="string">"你想保存文件吗？"</span>);</div><div class="line">        msgBox.setStandardButtons(QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel);</div><div class="line">        msgBox.setDefaultButton(QMessageBox::Save);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> ret = msgBox.exec();</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (ret) &#123;</div><div class="line">          <span class="keyword">case</span> QMessageBox::Save:</div><div class="line">              <span class="comment">// Save was clicked</span></div><div class="line">            <span class="keyword">this</span>-&gt;saveFileSlot();</div><div class="line">            event-&gt;ignore();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> QMessageBox::Discard:</div><div class="line">              <span class="comment">// Don't Save was clicked</span></div><div class="line">             event-&gt;accept();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> QMessageBox::Cancel:</div><div class="line">              <span class="comment">// Cancel was clicked</span></div><div class="line">            event-&gt;ignore();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">default</span>:</div><div class="line">              <span class="comment">// should never be reached</span></div><div class="line">            event-&gt;ignore();</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="添加程序图标"><a href="#添加程序图标" class="headerlink" title="添加程序图标"></a>添加程序图标</h1><p>在.pro文件加入</p><p><code>RC_ICONS = myappico.ico</code></p><p>也可在帮助中查找setting the application icon ，有一个添加.rc文件的方法</p><h1 id="添加菜单图标"><a href="#添加菜单图标" class="headerlink" title="添加菜单图标"></a>添加菜单图标</h1><p>右键文件列表最上的工程名-&gt;选择添加新文件-&gt;点击Qt-&gt;点击Qt Resource File-&gt;点击右下角choose-&gt;输入名字（如res）-&gt;下一步到完成</p><p>此时.pro文件就会有res文件加入，文件列表多出Resource文件夹</p><p>点击res.qrc-&gt;点击Add prefix添加前缀-&gt;之后点击Add Files添加图片</p><p>进入ui界面，在Action Editor 右键任意Action选Edit，选择图标</p><p>工具栏图标可直接拖拽</p><h1 id="添加TextEdit背景图"><a href="#添加TextEdit背景图" class="headerlink" title="添加TextEdit背景图"></a>添加TextEdit背景图</h1><p>ui界面</p><p>右键TextEdit部件</p><p>改变样式表-&gt;添加资源-&gt;border-image</p><p>点一下刷新按钮，选择图片</p>]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>将hexo博客部署到coding</title>
      <link href="/2017/10/03/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/"/>
      <url>/2017/10/03/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0coding/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相当于同时将博客部署到github和coding</p><p>1.为了解决github对百度爬虫的限制，使博客内容可以索引到</p><p>2.加快网页打开速度</p><a id="more"></a><h1 id="注册coding账号"><a href="#注册coding账号" class="headerlink" title="注册coding账号"></a>注册coding账号</h1><p>过程与github注册相似，并且coding是中文的。可参考末尾给出的网址</p><ul><li><p>建立一个工程，工程名尽量设置为用户名。  </p></li><li><p>在账户设置中添加ssh公钥，可直接用之前github的公钥<br><code>C:\Users\C_YANG_HEN\.ssh</code></p></li></ul><p>添加完成后，在gitbash输入<code>ssh -T git@git.coding.net</code></p><ul><li><p>修改站点配置文件<code>_config.yml</code><br>修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: </div><div class="line">    github: git@github.com:lhy0609/lhy0609.github.io.git,master</div><div class="line">    coding: git@git.coding.net:lhy0609/lhy0609.git,master</div></pre></td></tr></table></figure></li><li><p>在source添加一个文件</p></li></ul><p>Git bash输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd source/</div><div class="line">touch Staticfile  #名字必须是Staticfile</div></pre></td></tr></table></figure></p><p>执行hexo g -d ,完成部署</p><h1 id="coding-Pages"><a href="#coding-Pages" class="headerlink" title="coding Pages"></a>coding Pages</h1><p>进入Coding项目管理，在代码菜单中，开启page服务。注意框里要填master。之后稍等一段时间</p>]]></content>
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>更换电脑之后重新配置</title>
      <link href="/2017/09/27/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E4%B9%8B%E5%90%8E%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/09/27/%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E4%B9%8B%E5%90%8E%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>我重装系统之后搭建博客环境时遇到了一些问题，也记录一下更换电脑之后如何写博客</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>跟一开始搭建博客时一样，需要安装必要的软件</p><ul><li><p>安装Git，百度搜索msysgit，最新版直接安装</p></li><li><p>安装node.js,直接最新版，如果之前电脑上有旧版本，自行百度更新方法</p></li></ul><p>我保存了之前的博客文件，防止万一，我重新在github添加了ssh key.输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;Your Name&quot;</div><div class="line">git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure></p><h1 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h1><p>安装hexo时出现问题</p><p>输入<code>npm install -g hexo</code>,出现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm WARN deprecated swig@<span class="number">1.4</span><span class="number">.2</span>: This package is no longer maintained</div></pre></td></tr></table></figure><p>以为出错,查了很多资料，这句表示一直在安装中，但是速度很慢。</p><p>解决办法：设置淘宝镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config set registry &quot;https://registry.npm.taobao.org&quot;</div></pre></td></tr></table></figure></p><p>之后就可以安装hexo了</p><p>安装完成后环境就搭载好了，可直接将原电脑上的博客文件拷贝过来，进行hexo命令操作。</p><h1 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h1><p>hexo d提示错误</p><p>解决办法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install -g jquery</div><div class="line"></div><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenCV3.1+Qt5.9.1环境搭建</title>
      <link href="/2017/08/23/opencv3-1-Qt5-9-1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/08/23/opencv3-1-Qt5-9-1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>主要步骤参考：<a href="http://www.cnblogs.com/TooyLee/p/6438070.html" target="_blank" rel="external">Win10+QT5.7.1搭建OpenCV开发环境</a></p><hr><p>下面是我遇到的一些问题</p><h1 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h1><p>win10 + OpenCV3.1 + Qt 5.9.1</p><p>OpenCV3.2与OpenCV3.3与Qt5.9.1都不适配</p><a id="more"></a><h1 id="第一步配置"><a href="#第一步配置" class="headerlink" title="第一步配置"></a>第一步配置</h1><h2 id="OpenCV3-3"><a href="#OpenCV3-3" class="headerlink" title="OpenCV3.3"></a>OpenCV3.3</h2><p>点击configure后出现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CMake Error: CMake was unable to find abuild program corresponding to &quot;MinGW Makefiles&quot;.  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different buildtool.</div><div class="line"></div><div class="line">CMake Error: CMake was unable to find abuild program corresponding to &quot;MinGW Makefiles&quot;.  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different buildtool.</div></pre></td></tr></table></figure></p><p>解决办法：<br>找到Name为CMAKE_MAKE_PROGRAM的一项，把它的Value填写为D:\Qt\Qt5.9.1\Tools\mingw530_32\bin\mingw32-make.exe即可。<br>再次点击Configure，这时不会提示任何错误，表明配置成功。</p><p>等待一会儿后，会有一堆红色出现，勾选<strong>WITH_QT</strong>和<strong>WITH_OPENGL</strong>，不能勾选WITH_IPP（默认不勾选），再次点击<strong>configure</strong>。</p><p>若仍有红色出现，再次点击configure直至红色消失。</p><p>最后，点击Generate按钮，完成后即可关闭CMake。</p><h2 id="OpenCV3-1"><a href="#OpenCV3-1" class="headerlink" title="OpenCV3.1"></a>OpenCV3.1</h2><p>点击configure后报错！</p><p>解决办法：在Ungrouped Entries下找到Qt5Concurrent_DIR，Qt5Core_DIR，Qt5Gui_DIR，Qt5Test_DIR，Qt5Widgets_DIR，Qt5OpenGL_DIR，将value分别设置为：</p><p>D:/Qt/Qt5.9.1/5.9.1/mingw53_32/lib/cmake/Qt5Concurrent<br>D:/Qt/Qt5.9.1/5.9.1/mingw53_32/lib/cmake/Qt5Core<br>D:/Qt/Qt5.9.1/5.9.1/mingw53_32/lib/cmake/Qt5Gui<br>D:/Qt/Qt5.9.1/5.9.1/mingw53_32/lib/cmake/Qt5Test<br>D:/Qt/Qt5.9.1/5.9.1/mingw53_32/lib/cmake/Qt5Widgets<br>D:/Qt/Qt5.9.1/5.9.1/mingw53_32/lib/cmake/Qt5OpenGL</p><p>且 QT_QMAKE_EXECUTABLE  -&gt;  D:\Qt\Qt5.9.1\5.9.1\mingw53_32\bin\qmake.exe</p><p>之后再次点击configure直至列表中红色消失</p><h1 id="第二步编译"><a href="#第二步编译" class="headerlink" title="第二步编译"></a>第二步编译</h1><p>出现cmd中输入mingw32-make不识别，原因是Qt的环境变量配置出错</p><p>辅助链接：<br><a href="http://blog.csdn.net/zhaocj/article/details/38944037" target="_blank" rel="external">出现的一些问题</a></p>]]></content>
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Qt2D绘图-基本绘图</title>
      <link href="/2017/08/21/Qt2D%E7%BB%98%E5%9B%BE-%E5%9F%BA%E6%9C%AC%E7%BB%98%E5%9B%BE/"/>
      <url>/2017/08/21/Qt2D%E7%BB%98%E5%9B%BE-%E5%9F%BA%E6%9C%AC%E7%BB%98%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考：<a href="http://www.qter.org/portal.php?mod=view&amp;aid=26" target="_blank" rel="external">Qt快速入门系列教程</a>  </p><p>此页是自己学习使随记，全面的请看教程  </p><p>Qt有一个图形视图框架，有关图形项-&gt;场景-&gt;视图，碰撞检测，适合做游戏</p><a id="more"></a><p><strong>Qt绘制系统</strong></p><p>QPainter是一个状态机，设定一个状态后，接下来一直是这个状态</p><p><em>临时绘制</em>就是不改变当前状态，使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">painter.save()</div><div class="line">//code</div><div class="line">painter.restore()</div></pre></td></tr></table></figure></p><p>必须成对出现。</p><h1 id="基本绘制"><a href="#基本绘制" class="headerlink" title="基本绘制"></a>基本绘制</h1><h2 id="如何画线、矩形、椭圆"><a href="#如何画线、矩形、椭圆" class="headerlink" title="如何画线、矩形、椭圆"></a>如何画线、矩形、椭圆</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">painter.drawLine(<span class="number">80</span>, <span class="number">100</span>, <span class="number">650</span>, <span class="number">500</span>);</div><div class="line"></div><div class="line">painter.setPen(Qt::red);</div><div class="line">painter.drawRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">400</span>);</div><div class="line"></div><div class="line">painter.setPen(QPen(Qt::green, <span class="number">5</span>));<span class="comment">//5代表的是像素</span></div><div class="line">painter.setBrush(Qt::blue);</div><div class="line">painter.drawEllipse(<span class="number">50</span>, <span class="number">150</span>, <span class="number">400</span>, <span class="number">200</span>);</div></pre></td></tr></table></figure><h2 id="抗锯齿-反走样"><a href="#抗锯齿-反走样" class="headerlink" title="抗锯齿 反走样"></a>抗锯齿 反走样</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">painter.setRenderHint(QPainter::Antialiasing, <span class="literal">true</span>);</div><div class="line">painter.setPen(QPen(Qt::black, <span class="number">5</span>, Qt::DashDotLine, Qt::RoundCap));</div><div class="line">painter.setBrush(Qt::yellow);</div><div class="line">painter.drawEllipse(<span class="number">300</span>, <span class="number">150</span>, <span class="number">200</span>, <span class="number">150</span>);</div></pre></td></tr></table></figure><h1 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h1><p>Qt 提供了三种渐变：线性渐变（QLinearGradient）、辐射渐变（QRadialGradient）和角度渐变（QConicalGradient）。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//渐变效果</span></div><div class="line">painter.setRenderHint(QPainter::Antialiasing,<span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="function">QLinearGradient <span class="title">linearGradient</span><span class="params">(<span class="number">60</span>,<span class="number">50</span>,<span class="number">200</span>,<span class="number">200</span>)</span></span>;</div><div class="line">linearGradient.setColorAt(<span class="number">0.2</span>,Qt::white); <span class="comment">//渐变区域五分之一处设置为白色</span></div><div class="line">linearGradient.setColorAt(<span class="number">0.6</span>,Qt::green);</div><div class="line">linearGradient.setColorAt(<span class="number">1.0</span>,Qt::black);</div><div class="line"></div><div class="line">painter.setBrush(QBrush(linearGradient));</div><div class="line">painter.drawEllipse(<span class="number">50</span>,<span class="number">50</span>,<span class="number">200</span>,<span class="number">150</span>);</div></pre></td></tr></table></figure></p><p><a href="http://www.qter.org/portal.php?mod=view&amp;aid=39" target="_blank" rel="external">三种渐变方式</a></p><h1 id="坐标系统"><a href="#坐标系统" class="headerlink" title="坐标系统"></a>坐标系统</h1><h2 id="坐标变换"><a href="#坐标变换" class="headerlink" title="坐标变换"></a>坐标变换</h2><ul><li>平移     translate()</li><li>顺时针   rotate()</li><li>放大     scale()</li><li>纵向扭曲 shear()</li></ul><h2 id="改变坐标系"><a href="#改变坐标系" class="headerlink" title="改变坐标系"></a>改变坐标系</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">painter.setWindow(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);<span class="comment">//重新设定当前窗口坐标的格式，让其左上（0，0），右下（200，200），改变坐标系</span></div><div class="line">painter.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>, Qt::red);<span class="comment">//填充矩形</span></div></pre></td></tr></table></figure><p>setViewPort()<br>设置显示图形的范围</p><h1 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h1><p>&emsp;使用QPainterPath类，然后使用QPainter::drawPath()来进行绘制。QPainterPath类为绘制操作提供了一个<code>容器</code>，可以用来创建图形并且重复使用。<br>&emsp;一个绘图路径就是由多个矩形、椭圆、线条或者曲线等组成的对象，一个路径可以是封闭的，例如矩形和椭圆；也可以是非封闭的，例如线条和曲线。</p><h2 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> Widget::paintEvent(QPaintEvent *)</div><div class="line">&#123;</div><div class="line">    QPainterPath path;</div><div class="line">    path.addEllipse(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">50</span>);</div><div class="line">    path.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    painter.setPen(Qt::blue);</div><div class="line">    painter.setBrush(Qt::red);</div><div class="line">    painter.drawPath(path);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> 2D绘图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Qt2D绘图-窗口与视口</title>
      <link href="/2017/08/21/Qt2D%E7%BB%98%E5%9B%BE-%E7%AA%97%E5%8F%A3%E4%B8%8E%E8%A7%86%E5%8F%A3/"/>
      <url>/2017/08/21/Qt2D%E7%BB%98%E5%9B%BE-%E7%AA%97%E5%8F%A3%E4%B8%8E%E8%A7%86%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p><code>物理坐标</code>是默认坐标，指窗口中每一个像素点，与设备相关  </p><p>正是因为不同设备的原因，需要设定<code>逻辑坐标</code>，使绘图脱离设备，但最终还是有<code>逻辑坐标</code>线性映射到<code>物理坐标</code></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">X&apos; = aX + b </div><div class="line">Y&apos; = cY + d</div></pre></td></tr></table></figure><p>之后会遇到一个问题：在一个矩形窗口中使用逻辑坐标绘制一个正方形，因为线性映射会绘制成矩形。  </p><p>此时需要设置视口，利用<code>setViewPort()</code>,改变<code>逻辑坐标</code>线性映射的物理坐标。  </p><p><strong>视口小于等于物理坐标</strong>，设定视口坐标后有可能窗口部分区域不显示图形。</p><p>参考资料：<a href="http://www.qter.org/portal.php?mod=view&amp;aid=47" target="_blank" rel="external">Qt 2D绘图部分窗口、视口的研究</a></p><p><em>按照例子试一下就容易理解了</em></p>]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> 2D绘图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++基础概念总结（二）-面向对象</title>
      <link href="/2017/08/17/C-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2017/08/17/C-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p><strong>面向对象编程基本思想</strong></p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>一张桌子，一只笔都可以作为一个对象，这个对象包含了其属性值和操作，对象的整个结构特征有属性值表示，通过操作改变属性值进而改变对象的状态。</p><p>即对象是一个封装了数据和操作的实体。</p><a id="more"></a> <h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>&emsp;&emsp;类是对象集合的一种抽象，它规定了这些对象的公共属性和方法；对象则是类的一个实例。</p><ul><li><p>继承性：</p><p> 可重用性，在定义一个新的对象时，只需将其特有的属性和操作书写出来，其余选择继承前人的劳动成果，可以大大减少工作量和重复定义。</p></li></ul><ul><li><p>封装性：</p><p> 对象的具体数据结构和各种操作的具体细节对调用者是隐藏的，只需调用，无需知道函数的具体细节</p></li></ul><ul><li><p>多态性：</p><p> C++提供多态的目的是：可以通过基类指针对所有派生类（包括直接派生和间接派生）的成员变量和成员函数进行“全方位”的访问，尤其是成员函数。如果没有多态，我们只能访问成员变量。基类对象可以调用派生类中的函数</p><p> 实现同一条语句可以执行不同的操作，即多态，C++中虚函数的唯一用处就是构成多态。</p><p> 参考资料：<a href="http://blog.csdn.net/zhanghow/article/details/53588529" target="_blank" rel="external">C++多态的概念以及用途（通俗易懂）</a></p></li></ul><h1 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h1><p> 抽象概念类和具体实体</p><p>类=数据 + 操作（函数）</p><p>每一个对象都是类的一个实例，各自具有自己的数据值，而数据结构由类统一定义</p><h1 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h1><p>指向类本身的一个指针</p><p>在Qt中还会见到qApp指针，为应用程序实例化指针，指向程序的全局变量</p><p><code>QcoreApplication::intance();</code></p><h1 id="重载与重写"><a href="#重载与重写" class="headerlink" title="重载与重写"></a>重载与重写</h1><p>重写是子类的方法覆盖父类的方法，要求方法名和参数都相同</p><p>重载是在同一个类中的两个或两个以上的方法，拥有相同的方法名，但是参数却不相同，方法体也不相同，最常见的重载的例子就是类的构造函数。</p><h1 id="构造与析构函数"><a href="#构造与析构函数" class="headerlink" title="构造与析构函数"></a>构造与析构函数</h1><p>分别对应着对象的开始和结束</p><p>构造函数与类的名字相同，进行对象的初始化，无返回值，一个类可以无也可有多个参数不同的构造函数</p><p>析构函数在对象结束时调用，名字为构造函数前加<code>~</code>。</p><h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><p>C++中用虚函数来支持多态性，参考多态性，函数前加<em>virtual</em></p><h1 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h1><p>友元函数是可以直接访问类的私有成员的非成员函数。</p><p>它是定义在类外的普通函数，它不属于任何类，但需要在类的定义中加以声明，声明时只需在友元的名称前加上关键字<em>friend</em>。调用与一般函数相同。</p><p>简单来说，友元函数给关在屋子里私有成员的开了一个后门。可以使类与类实现数据共享。</p><p>参考资料：<a href="http://www.cnblogs.com/BeyondAnyTime/archive/2012/06/04/2535305.html" target="_blank" rel="external">关于C++中的友元函数的总结</a></p>]]></content>
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++基础概念总结（一）</title>
      <link href="/2017/08/17/C-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2017/08/17/C-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>&emsp;&emsp;此次C++总结是为Qt学习做准备，把很多自己以前不清楚的概念用自己的话描述一遍。</p><p>&emsp;&emsp;包括数据类型，运算符，流程控制不再详述</p><p>&emsp;&emsp;接下来记录一个自定义数据类型枚举类型</p><a id="more"></a><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><p>&emsp;&emsp;在程序中，可能需要为某些整数定义一个别名，我们可以利用预处理指令#define来完成这项工作，您的代码可能是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#define MON   1</div><div class="line">#define TUE   2</div><div class="line">#define WED   3</div><div class="line">#define THU   4</div><div class="line">#define FRI   5</div><div class="line">#define SAT   6</div><div class="line">#define SUN   7</div></pre></td></tr></table></figure><p>在此，我们定义一种新的数据类型，希望它能完成同样的工作。这种新的数据类型叫枚举型。</p><p>然后定义一种新的数据类型 - 枚举型</p><p>以下代码定义了这种新的数据类型 - 枚举型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> DAY</div><div class="line">&#123;</div><div class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ol><li>枚举型是一个集合，集合中的元素(枚举成员)是一些命名的整型常量，元素之间用逗号,隔开。</li><li>DAY是一个标识符，可以看成这个集合的名字，是一个可选项，即是可有可无的项。</li><li>第一个枚举成员的默认值为整型的0，后续枚举成员的值在前一个成员上加1。</li><li>可以人为设定枚举成员的值，从而自定义某个范围内的整数。</li><li>枚举型是预处理指令#define的替代。</li><li>类型定义以分号;结束。</li></ol><p>参考资料：<a href="http://blog.csdn.net/vjjjjjta/article/details/6337081#comments" target="_blank" rel="external">C-枚举</a></p>]]></content>
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo+hiker主题配置与美化</title>
      <link href="/2017/08/11/Hexo-hiker%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%BE%8E%E5%8C%96/"/>
      <url>/2017/08/11/Hexo-hiker%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%BE%8E%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章承接上一篇 <a href="https://lhy0609.github.io/2017/08/11/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">Hexo+Github搭建个人博客</a> ,本文以hiker主题为主，主要是关于hiker主题的配置和美化。主要分为下面几个部分：</p><ul><li><p>clone主题。别人做好的直接拿过来用就行了，自己在做一些小修改。</p></li><li><p>_config.yml的配置。_config.yml在站点主文件夹和主题文件夹各有一个</p></li><li><p>网站功能的添加</p></li><li><p>写文章时注意的问题</p></li><li><p>自己使用时遇到的一些问题</p></li></ul><p><em>注：我的站点文件夹是blog</em></p><a id="more"></a><hr><h1 id="clone主题"><a href="#clone主题" class="headerlink" title="clone主题"></a>clone主题</h1><ul><li><p>以hiker主题为例，在blog文件夹右键选择 <em>Git Bash here</em> 输入：<code>git clone https://github.com/iTimeTraveler/hexo-theme-hiker.git themes/hiker</code><br>此操作将主题文件下载到本地。</p></li><li><p>修改站点配置文件_config.yml中themes项修改为hiker</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: http:<span class="comment">//hexo.io/plugins/</span></div><div class="line">## Themes: http:<span class="comment">//hexo.io/themes/</span></div><div class="line">theme: hiker</div></pre></td></tr></table></figure><ul><li>接着在Git Bash中输入：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd themes/hiker</div><div class="line">git pull</div></pre></td></tr></table></figure><p>进行主题的更新</p><p>回到站点文件夹的Git Bash输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo c</div><div class="line">hexo g -d</div></pre></td></tr></table></figure></p><p>之后就可以在浏览器查看了。</p><p><strong>提醒：每次部署之前最好把站点文件夹内的 <em>.deploy_git</em> 文件夹删掉，否则可能出现部署之后网站并没有更改。</strong></p><h1 id="站点-config-yml的配置"><a href="#站点-config-yml的配置" class="headerlink" title="站点_config.yml的配置"></a>站点_config.yml的配置</h1><p>在站点配置文件可以修改网站的标题和描述，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: #网站标题</div><div class="line">subtitle: #副标题</div><div class="line">description: #描述</div><div class="line">author: #作者</div><div class="line">language: zh-CN  #语言，zh-CN表示中文简体</div><div class="line">timezone:</div></pre></td></tr></table></figure><p>其余没什么好修改的</p><h1 id="hiker主题配置与美化"><a href="#hiker主题配置与美化" class="headerlink" title="hiker主题配置与美化"></a>hiker主题配置与美化</h1><p>主题 <em>_config.yml的配置文件的位置在“blog/themes/hiker/_config.yml”，主题美化主要是修改它。</em></p><h2 id="阅读全文按钮"><a href="#阅读全文按钮" class="headerlink" title="阅读全文按钮"></a>阅读全文按钮</h2><p>这里先只说一种方法：在写文章时在你需要分割的地方写<code>&lt;!-- more --&gt;</code>。如</p><blockquote><p>床前明月光<br>疑是地上霜<br><code>&lt;!-- more --&gt;</code><br>举头望明月<br>低头思故乡</p></blockquote><p><em>不要写到代码区</em></p><h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 头像设置</div><div class="line"># Put your favicon.ico or avatar.jpg into `hexo-site/themes/hiker/source/` directory.</div><div class="line">avatar: </div><div class="line">  enable: true</div><div class="line">  border: true</div><div class="line">  width: 124</div><div class="line">  height: 124</div><div class="line">  top: 0</div><div class="line">  url: css/images/mylogo.jpg  #头像修改位置</div></pre></td></tr></table></figure><h2 id="设置标签、分类、关于页面"><a href="#设置标签、分类、关于页面" class="headerlink" title="设置标签、分类、关于页面"></a>设置标签、分类、关于页面</h2><p>在Git Bash中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo new page about</div><div class="line">hexo new page tags</div><div class="line">hexo new page categories</div></pre></td></tr></table></figure><p>在blog/source/中会多出三个文件夹，每个文件夹里都有一个index.md。 </p><p>以tags为例，修改其中的index.md，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags</div><div class="line">date: 2017-08-10 09:35:41</div><div class="line">layout: tags</div><div class="line">comments: false   #此页评论关闭</div><div class="line">---</div></pre></td></tr></table></figure><p>分类与其相同，只是要把tags改为categories</p><h3 id="关于页面："><a href="#关于页面：" class="headerlink" title="关于页面："></a>关于页面：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 个人简介</div><div class="line">date: 2017-08-10 09:35:41</div><div class="line">comments: false</div><div class="line">---</div><div class="line"></div><div class="line">写你的文章</div></pre></td></tr></table></figure><h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p>输入：<code>npm install -S hexo-generator-ison-content</code></p><h2 id="关于页面背景音乐"><a href="#关于页面背景音乐" class="headerlink" title="关于页面背景音乐"></a>关于页面背景音乐</h2><p>在网易云音乐网页版找到歌曲，生成外链播放器，复制代码加到关于页面的index.md中</p><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>我用的是来比力</p><p>登陆来比力-&gt;注册账户-&gt;进入管理页面-&gt;安装免费city-&gt;得到代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># comment ShortName, you can choose only ONE to display.</div><div class="line"># 评论 目前使用的是来比力 </div><div class="line">gentie_productKey: #your-gentie-product-key</div><div class="line">duoshuo_shortname: </div><div class="line">disqus_shortname: </div><div class="line">livere_shortname: MTAyMC8yOTQ4MS82MDQ5  #更换这个就可以了</div><div class="line">uyan_uid: </div><div class="line">wumii:</div></pre></td></tr></table></figure><h2 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">donate: </div><div class="line"> enable: true</div><div class="line"> message: &apos;如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作!&apos;</div><div class="line"> wechatImage: http://i2.bvimg.com/1949/0df6d998c39d7c13.jpg   #放你的图片</div><div class="line"> alipayImage: http://i2.bvimg.com/1949/0df6d998c39d7c13.jpg</div></pre></td></tr></table></figure><h2 id="主页大图滚动速度"><a href="#主页大图滚动速度" class="headerlink" title="主页大图滚动速度"></a>主页大图滚动速度</h2><p>打开 <em>hiker/layout/_partial/header.ejs</em> 第53行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&apos;section.awSlider .carousel&apos;).carousel(&#123;</div><div class="line">              pause: &apos;&apos;,</div><div class="line">              interval: 5000</div></pre></td></tr></table></figure></p><p>5000代表5s。</p><h2 id="修改主页大图与主题色"><a href="#修改主页大图与主题色" class="headerlink" title="修改主页大图与主题色"></a>修改主页大图与主题色</h2><p>找home_background_image，highlight_theme关键字</p><h1 id="关于写文章"><a href="#关于写文章" class="headerlink" title="关于写文章"></a>关于写文章</h1><p>输入  <code>hexo new &quot;标题&quot;</code>  </p><p><em>会在blog/source/_post/下生成.md文件，在里面用 Markdown语法书写文章</em></p><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hexo+hiker主题配置和美化</div><div class="line">date: 2017-08-10 15:11:55</div><div class="line">tags: [hexo,github]   #标签</div><div class="line">categories: hexo博客  #分类</div><div class="line">---</div></pre></td></tr></table></figure><p><em>Hexo文件都是UTF-8编码方式</em>  </p><p>每次写完，进行部署</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo c</div><div class="line">hexo g -d</div></pre></td></tr></table></figure><p>就可以在网站上看到你的博客了！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.jianshu.com/p/701b1095da11" target="_blank" rel="external">手把手教你建github技术博客</a></p><p><a href="http://blog.csdn.net/u010983881/article/details/52912871" target="_blank" rel="external">终于完工的Hexo主题：Hiker</a></p><p><a href="http://www.wuxubj.cn/2016/08/Hexo-nexT-build-personal-blog/" target="_blank" rel="external">Hexo+nexT主题搭建个人博客</a></p><p><a href="http://www.mway.top/2016/10/17/hexo-NEXT%E4%B8%BB%E9%A2%98%E4%B9%8B%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/" target="_blank" rel="external">hexo+NEXT主题之博客优化</a></p>]]></content>
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo+Github搭建个人博客</title>
      <link href="/2017/08/11/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/08/11/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p><strong>gitHub</strong>是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。  </p><p>除了git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。</p><p>需要申请一个账户。</p></li><li><p><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></li></ul><a id="more"></a><ul><li><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。需要简单学习一下语法。  </li></ul><hr><h1 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h1><ul><li><p>安装Git<br>直接搜索msysgit，也可百度一下Git，对它进行一些了解。</p></li><li><p>安装Node.js<br>因为hexo是node.js编写的。安装方法可自行百度。</p></li><li><p>Notepad++(可选)<br>用来代替记事本来修改配置文件，也可以用来写Markdown文档</p></li><li><p>sublime Text 3(可选)<br>跟Notepad++相似，但比它强大。</p></li></ul><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>新建一个文件夹 <em>比如叫“blog”</em> ，用来存放搭建博客所需的文件。<br>安装Git后，在右键菜单会有“Git bash here”。然后进入blog文件夹，右键任意位置选择Git bash here，会出现一个类似于cmd的命令行工具界面。</p><p>接下来依次输入 </p><p>安装hexo：<code>npm install -g hexo</code></p><p>初始化：<code>hexo init</code>  </p><p>安装依赖包：<code>npm install</code></p><p>然后输入下面两行进行查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g   </div><div class="line">hexo s</div></pre></td></tr></table></figure></p><p>在浏览器中输入 <em>localhost::4000</em> 就可以看到hexo的网页，这个网页是默认设置的，之后可以进行美化。</p><p>下面是一些常用hexo代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hexo help              #查看帮助</div><div class="line">hexo init              #初始化一个目录</div><div class="line">hexo new "postName"           #新建文章</div><div class="line">hexo new page "pageName"      #新建页面</div><div class="line">hexo generate       #生成网页，可以在 public 目录查看整个网站的文件 "hexo g"</div><div class="line">hexo server         #本地预览，'Ctrl+C'关闭，可简写 "hexo s"</div><div class="line">hexo deploy         #部署.deploy目录      "hexo d"</div><div class="line">hexo clean          #清除缓存，"hexo c" **强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**</div></pre></td></tr></table></figure><h1 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h1><h2 id="创建Github账户"><a href="#创建Github账户" class="headerlink" title="创建Github账户"></a>创建Github账户</h2><p>自行百度  </p><h2 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h2><p>点击 <em>new repository</em>    </p><p>名字设置为“GitName.github.io”,这个GitName就是你Github的用户名，比如 “ <em>zhangsan.github.io</em> “   </p><p>生成之后就不必管他了。  </p><h2 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h2><p>在Git bash中输入 <code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code>按三个回车，密码为空。  </p><p>之后在用户文件夹下生成 <em>.ssh</em> 文件夹，里面有 <em>id.ssh</em> 和 <em>id_rsa.pub</em>   </p><p>打开 <em>id_rsa.pub</em> 复制全文  </p><p>打开 <em>http:://github.com/settings/ssh</em> ，点 <em>new ssh key</em> ，然后粘贴进去。  </p><h1 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置_config.yml文件</h1><p>blog文件夹里有一个_config.yml文件，用Notepad++打开。  </p><ul><li>在deploy：项修改为下面这样(GitName的含义同上)  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https:<span class="comment">//github.com/GitName/GitName.github.io.git</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure><p><strong>注意每个冒号后都要有一个空格</strong></p><ul><li>blog文件夹中右键 Git bash here   </li></ul><p>输入 <code>npm install hexo-deployer-git --save</code></p><ul><li>部署到Github</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure><hr><p><strong>此时已基本完成，浏览器输入 <em>http:://GitName.github.io</em>  查看自己的劳动成果。下一篇是关于博客的配置和美化</strong> </p>]]></content>
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Qt学习-2.信号与槽</title>
      <link href="/2017/08/10/Qt%E5%AD%A6%E4%B9%A0-2.%E4%BF%A1%E5%8F%B7%E4%B8%8E%E6%A7%BD/"/>
      <url>/2017/08/10/Qt%E5%AD%A6%E4%B9%A0-2.%E4%BF%A1%E5%8F%B7%E4%B8%8E%E6%A7%BD/</url>
      <content type="html"><![CDATA[<p><strong>信号与槽</strong></p><hr><h1 id="连接函数书写"><a href="#连接函数书写" class="headerlink" title="连接函数书写"></a>连接函数书写</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">QObject::connect(ui-&gt;closeButton,SIGNAL(clicked()),</div><div class="line"><span class="keyword">this</span>,SLOT(quit()));</div><div class="line"><span class="comment">//上为Qt4老语法，下为Qt5新语法</span></div><div class="line"></div><div class="line">QObject::connect(closeButton,&amp;clicked(),<span class="keyword">this</span>,&amp;quit());</div><div class="line"><span class="comment">//                     ①         ②       ③    ④</span></div></pre></td></tr></table></figure><p>①③为对象指针，分别为发起者与接收者。④等待②的信号被发出</p><hr><a id="more"></a><h1 id="自定义槽"><a href="#自定义槽" class="headerlink" title="自定义槽"></a>自定义槽</h1><p>MainWindows.h中定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//public slots:</div><div class="line">private slots:</div><div class="line">      void testSlot();</div></pre></td></tr></table></figure><p>然后在MainWindow.cpp中实现</p><p>void MainWindow::testSlot()<br>{</p><p>}</p><hr><h1 id="自定义信号"><a href="#自定义信号" class="headerlink" title="自定义信号"></a>自定义信号</h1><p>MainWindow.h中定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">signals:</div><div class="line">   void testSignal();</div></pre></td></tr></table></figure><p>在MainWindow类中就多了一个信号</p><p>然后在合适位置利用<code>emit testSignal();</code>进行发射信号</p><p>利用连接函数检测这个信号的发出，进而进行操作。</p><p><em><code>PS</code>：也可以在ui设计界面，按F4，在组件之间进行拖拽也可以进行连接，当然是保证你的信号和槽是已有的。</em></p>]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Qt学习-1.Hello Word解析</title>
      <link href="/2017/08/10/Qt%E5%AD%A6%E4%B9%A0-1.Hello%20Word%E8%A7%A3%E6%9E%90/"/>
      <url>/2017/08/10/Qt%E5%AD%A6%E4%B9%A0-1.Hello%20Word%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line"><span class="comment">//预处理头文件不用说</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"><span class="comment">//主函数。其中int argc, char *argv[]代表此程序可接受的参数，</span></span></div><div class="line"><span class="function"><span class="comment">//argc代表输入字符串的个数，argc[]代表输入的字符串</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line"><span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</div><div class="line"><span class="comment">//新建一个QApplication对象</span></div><div class="line"></div><div class="line">QLabel *label = <span class="keyword">new</span> QLabel(<span class="string">"Hello, word"</span>);</div><div class="line"><span class="comment">//新建一个QLabel对象指针，注意新建指针时一定要初始化</span></div><div class="line"><span class="comment">//如果类似上面直接传递"Hello, word",是传递给了QLabel的构造函数，显示字符</span></div><div class="line"></div><div class="line">label-&gt;show();</div><div class="line"><span class="comment">//将构建好的label显示出来</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> app.exec();</div><div class="line"><span class="comment">//程序进入消息循环，等待可能的输入进行响应，当exit()调用时结束</span></div><div class="line"><span class="comment">//这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回</span></div><div class="line"><span class="comment">//在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
